// Generated by CoffeeScript 1.6.3
(function() {
  var ChannelMethods,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  module.exports = ChannelMethods = (function() {
    function ChannelMethods(apiClient) {
      this.apiClient = apiClient;
      this.postStyleEventsForConnections = __bind(this.postStyleEventsForConnections, this);
      this.deleteStyleEvent = __bind(this.deleteStyleEvent, this);
      this.putStyleEvent = __bind(this.putStyleEvent, this);
      this.patchStyleEvent = __bind(this.patchStyleEvent, this);
      this.getStyleEvent = __bind(this.getStyleEvent, this);
      this.postStyleEvents = __bind(this.postStyleEvents, this);
      this.allStyleEvents = __bind(this.allStyleEvents, this);
      this.deleteFollower = __bind(this.deleteFollower, this);
      this.putFollower = __bind(this.putFollower, this);
      this.getFollowers = __bind(this.getFollowers, this);
      this["delete"] = __bind(this["delete"], this);
      this.patch = __bind(this.patch, this);
      this.post = __bind(this.post, this);
      this.get = __bind(this.get, this);
      this.all = __bind(this.all, this);
      if (!this.apiClient) {
        throw new Error("apiClient parameter is required");
      }
    }

    ChannelMethods.prototype.all = function(params, actAsActorId, cb) {
      if (params == null) {
        params = {};
      }
      if (actAsActorId == null) {
        actAsActorId = null;
      }
      if (cb == null) {
        cb = function() {};
      }
      return this.apiClient.get("/channels", params, actAsActorId, cb);
    };

    ChannelMethods.prototype.get = function(channelId, params, actAsActorId, cb) {
      if (params == null) {
        params = {};
      }
      if (actAsActorId == null) {
        actAsActorId = null;
      }
      if (cb == null) {
        cb = function() {};
      }
      return this.apiClient.get("/channels/" + channelId, params, actAsActorId, cb);
    };

    ChannelMethods.prototype.post = function(data, actAsActorId, cb) {
      if (data == null) {
        data = {};
      }
      if (actAsActorId == null) {
        actAsActorId = null;
      }
      if (cb == null) {
        cb = function() {};
      }
      return this.apiClient.post("/channels", data, actAsActorId, cb);
    };

    ChannelMethods.prototype.patch = function(channelId, data, actAsActorId, cb) {
      if (data == null) {
        data = {};
      }
      if (actAsActorId == null) {
        actAsActorId = null;
      }
      if (cb == null) {
        cb = function() {};
      }
      return this.apiClient.patch("/channels/" + channelId, data, actAsActorId, cb);
    };

    ChannelMethods.prototype["delete"] = function(channelId, actAsActorId, cb) {
      if (actAsActorId == null) {
        actAsActorId = null;
      }
      if (cb == null) {
        cb = function() {};
      }
      return this.apiClient["delete"]("/channels/" + channelId, null, actAsActorId, cb);
    };

    ChannelMethods.prototype.getFollowers = function(channelId, params, actAsActorId, cb) {
      if (params == null) {
        params = {};
      }
      if (actAsActorId == null) {
        actAsActorId = null;
      }
      if (cb == null) {
        cb = function() {};
      }
      return this.apiClient.get("/channels/" + channelId + "/followers", params, actAsActorId, cb);
    };

    ChannelMethods.prototype.putFollower = function(channelId, followerId, actAsActorId, cb) {
      if (actAsActorId == null) {
        actAsActorId = null;
      }
      if (cb == null) {
        cb = function() {};
      }
      return this.apiClient.put("/channels/" + channelId + "/followers/" + followerId, null, actAsActorId, cb);
    };

    ChannelMethods.prototype.deleteFollower = function(channelId, followerId, actAsActorId, cb) {
      if (actAsActorId == null) {
        actAsActorId = null;
      }
      if (cb == null) {
        cb = function() {};
      }
      return this.apiClient["delete"]("/channels/" + channelId + "/followers/" + followerId, null, actAsActorId, cb);
    };

    ChannelMethods.prototype.allStyleEvents = function(channelId, params, actAsActorId, cb) {
      if (params == null) {
        params = {};
      }
      if (actAsActorId == null) {
        actAsActorId = null;
      }
      if (cb == null) {
        cb = function() {};
      }
      return this.apiClient.get("/channels/" + channelId + "/style-events", params, actAsActorId, cb);
    };

    ChannelMethods.prototype.postStyleEvents = function(channelId, data, actAsActorId, cb) {
      if (data == null) {
        data = {};
      }
      if (actAsActorId == null) {
        actAsActorId = null;
      }
      if (cb == null) {
        cb = function() {};
      }
      return this.apiClient.post("/channels/" + channelId + "/style-events", data, actAsActorId, cb);
    };

    ChannelMethods.prototype.getStyleEvent = function(channelId, styleEventId, params, actAsActorId, cb) {
      if (params == null) {
        params = {};
      }
      if (actAsActorId == null) {
        actAsActorId = null;
      }
      if (cb == null) {
        cb = function() {};
      }
      return this.apiClient.get("/channels/" + channelId + "/style-events/" + styleEventId, params, actAsActorId, cb);
    };

    ChannelMethods.prototype.patchStyleEvent = function(channelId, styleEventId, data, actAsActorId, cb) {
      if (data == null) {
        data = {};
      }
      if (actAsActorId == null) {
        actAsActorId = null;
      }
      if (cb == null) {
        cb = function() {};
      }
      return this.apiClient.patch("/channels/" + channelId + "/style-events/" + styleEventId, data, actAsActorId, cb);
    };

    ChannelMethods.prototype.putStyleEvent = function(channelId, styleEventId, data, actAsActorId, cb) {
      if (data == null) {
        data = {};
      }
      if (actAsActorId == null) {
        actAsActorId = null;
      }
      if (cb == null) {
        cb = function() {};
      }
      return this.apiClient.put("/channels/" + channelId + "/style-events/" + styleEventId, data, actAsActorId, cb);
    };

    ChannelMethods.prototype.deleteStyleEvent = function(channelId, styleEventId, actAsActorId, cb) {
      if (actAsActorId == null) {
        actAsActorId = null;
      }
      if (cb == null) {
        cb = function() {};
      }
      return this.apiClient["delete"]("/channels/" + channelId + "/style-events/" + styleEventId, null, actAsActorId, cb);
    };

    ChannelMethods.prototype.postStyleEventsForConnections = function(channelId, hashes, actAsActorId, cb) {
      if (hashes == null) {
        hashes = [];
      }
      if (actAsActorId == null) {
        actAsActorId = null;
      }
      if (cb == null) {
        cb = function() {};
      }
      return this.apiClient.post("/channels/" + channelId + "/style-events-for-connections", {
        hashes: hashes
      }, actAsActorId, cb);
    };

    return ChannelMethods;

  })();

}).call(this);
