// Generated by CoffeeScript 1.4.0
(function() {
  var ActionMethods, ChannelMethods, Client, StyleEventMethods, StylistMethods, UserMethods, request, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  request = require('request');

  _ = require('underscore');

  StyleEventMethods = require('./style-event-methods');

  ChannelMethods = require('./channel-methods');

  UserMethods = require('./user-methods');

  StylistMethods = require('./stylist-methods');

  ActionMethods = require('./action-methods');

  module.exports = Client = (function() {

    function Client(endpoint, options) {
      this.endpoint = endpoint;
      this.options = options != null ? options : {};
      this.get = __bind(this.get, this);

      this["delete"] = __bind(this["delete"], this);

      this.put = __bind(this.put, this);

      this.patch = __bind(this.patch, this);

      this.post = __bind(this.post, this);

      this._reqWithData = __bind(this._reqWithData, this);

      this._handleResult = __bind(this._handleResult, this);

      this._cleanEndpoint = __bind(this._cleanEndpoint, this);

      this.endpoint = this._cleanEndpoint(this.endpoint);
      if (!(this.endpoint && this.endpoint.length > 0)) {
        throw new Error("Endpoint required");
      }
      _.defaults(this.options, {
        maxCacheItems: 1000,
        maxTokenCache: 60 * 10,
        clientId: null,
        bearerToken: null,
        headers: {}
      });
      this.cache = {};
      this.styleEvents = new StyleEventMethods(this);
      this.channels = new ChannelMethods(this);
      this.users = new UserMethods(this);
      this.stylists = new StylistMethods(this);
      this.actions = new ActionMethods(this);
    }

    Client.prototype._cleanEndpoint = function(endpoint) {
      if (!endpoint) {
        return null;
      }
      return endpoint.replace(/\/+$/, "");
    };

    Client.prototype._handleResult = function(res, bodyBeforeJson, callback) {
      var body;
      if (res.statusCode === 401 || res.statusCode === 403) {
        return callback(new Error("Forbidden"));
      }
      body = null;
      if (bodyBeforeJson && bodyBeforeJson.length > 0) {
        try {
          body = JSON.parse(bodyBeforeJson);
        } catch (e) {
          return callback(new Error("Invalid Body Content"), bodyBeforeJson, res.statusCode);
        }
      }
      if (!(res.statusCode >= 200 && res.statusCode < 300)) {
        return callback(new Error(body ? body.message : "Request failed."));
      }
      return callback(null, body, res.statusCode);
    };

    Client.prototype._reqWithData = function(method, path, params, data, headers, actAsActorId, callback) {
      var _this = this;
      if (headers == null) {
        headers = {};
      }
      if (data) {
        headers['Content-Type'] = 'application/json';
      }
      headers['Accept'] = 'application/json';
      if (this.options.bearerToken) {
        headers['authorization'] = "Bearer " + this.options.bearerToken;
      }
      if (actAsActorId) {
        headers['X-Act-As-ActorId'] = actAsActorId;
      }
      _.extend(headers, this.options.headers);
      return request({
        uri: "" + this.endpoint + path,
        headers: headers,
        body: data ? JSON.stringify(data) : null,
        method: method,
        timeout: 2000
      }, function(err, res, body) {
        if (err) {
          err.status = res && res.statusCode ? res.statusCode : 503;
          return callback(err);
        }
        return _this._handleResult(res, body, callback);
      });
    };

    Client.prototype.post = function(path, data, actAsActorId, callback) {
      return this._reqWithData("POST", path, null, data, null, actAsActorId, callback);
    };

    Client.prototype.patch = function(path, data, actAsActorId, callback) {
      return this._reqWithData("PATCH", path, null, data, null, actAsActorId, callback);
    };

    Client.prototype.put = function(path, data, actAsActorId, callback) {
      return this._reqWithData("PUT", path, null, data, null, actAsActorId, callback);
    };

    Client.prototype["delete"] = function(path, params, actAsActorId, callback) {
      return this._reqWithData("DELETE", path, params, null, null, actAsActorId, callback);
    };

    Client.prototype.get = function(path, params, actAsActorId, callback) {
      return this._reqWithData("GET", path, params, null, null, actAsActorId, callback);
    };

    return Client;

  })();

}).call(this);
